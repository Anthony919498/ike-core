---
apiVersion: v1
kind: Namespace
metadata:
  name: rook-minio-infra
---
apiVersion: v1
kind: Secret
metadata:
  name: minio-infra-access-keys
  namespace: rook-minio-infra
type: Opaque
data:
  # Base64 encoded string: "TEMP_DEMO_ACCESS_KEY"
  username: {{ rook_minio_infra_access_key }}
  # Base64 encoded string: "TEMP_DEMO_SECRET_KEY"
  password: {{ rook_minio_infra_secret_key }}
---
apiVersion: minio.rook.io/v1alpha1
kind: ObjectStore
metadata:
  name: minio-infra
  namespace: rook-minio-infra
spec:
  scope:
    nodeCount: 4
    # You can have multiple PersistentVolumeClaims in the volumeClaimTemplates list.
    # Be aware though that all PersistentVolumeClaim Templates will be used for each intance (see nodeCount).
    volumeClaimTemplates:
    - metadata:
        name: rook-minio-data1
      spec:
        accessModes: [ "ReadWriteOnce" ]
        # Set the storage class that will be used, otherwise Kubernetes' default storage class will be used.
        storageClassName: "rook-ceph-block"
        resources:
          requests:
            storage: "8Gi"
    #- metadata:
    #    name: rook-minio-data2
    #  spec:
    #    accessModes: [ "ReadWriteOnce" ]
    #    # Uncomment and specify your StorageClass, otherwise
    #    # the cluster admin defined default StorageClass will be used.
    #    #storageClassName: "your-cluster-storageclass"
    #    resources:
    #      requests:
    #        storage: "8Gi"
  # A key value list of annotations
  annotations:
  #  key: value
  placement:
    tolerations:
    nodeAffinity:
    podAffinity:
    podAnyAffinity:
  credentials:
    name: minio-infra-access-keys
    namespace: rook-minio-infra
  clusterDomain:
#{% if expose_minio_infra_nodeport  %}
#---
#apiVersion: v1
#kind: Service
#metadata:
#  name: minio-infra-nodeport
#  namespace: rook-minio-infra
#spec:
#  type: NodePort
#  ports:
#    - port: 9000
#  selector:
#    app: minio
#{% endif %}
