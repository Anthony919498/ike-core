---
- name: Create temp directory "{{ data_path }}/certificates"
  file:
    path: "{{ item  }}"
    state: directory
  with_items:
    - "{{ data_path }}/certificates"
    - "{{ data_path }}/certificates/ca"
    - "{{ data_path }}/certificates/intermediate"
    - "{{ data_path }}/certificates/intermediate/kubernetes-ca"
    - "{{ data_path }}/certificates/intermediate/kubernetes-ca/signed"
    - "{{ data_path }}/certificates/intermediate/etcd-ca"
    - "{{ data_path }}/certificates/intermediate/etcd-ca/signed"
    - "{{ data_path }}/certificates/intermediate/kubernetes-front-proxy-ca"
    - "{{ data_path }}/certificates/intermediate/kubernetes-front-proxy-ca/signed"
    - "{{ data_path }}/certificates/end/kube-etcd"
    - "{{ data_path }}/certificates/end/kube-etcd-peer"
    - "{{ data_path }}/certificates/end/kube-etcd-healthcheck-client"
    - "{{ data_path }}/certificates/end/kube-apiserver-etcd-client"
    - "{{ data_path }}/certificates/end/kube-apiserver"
    - "{{ data_path }}/certificates/end/kube-apiserver-kubelet-client"
    - "{{ data_path }}/certificates/end/front-proxy-client"
    - "{{ data_path }}/certificates/configs"
    - "{{ data_path }}/certificates/configs/admin"
    - "{{ data_path }}/certificates/configs/kubelet"
    - "{{ data_path }}/certificates/configs/controller-manager"
    - "{{ data_path }}/certificates/configs/scheduler"
    - "{{ data_path }}/certificates/configs/proxier"

- name: create ca_root_csr file
  template:
    src: root_csr.json.j2
    dest: "{{ data_path }}/certificates/ca/ca-csr.json"

- name: generate ca_root certificates
  shell: 'cfssl gencert -initca "{{ data_path }}/certificates/ca/ca-csr.json" | cfssljson -bare "{{ data_path }}/certificates/ca/ca"'
  args:
    creates: "{{ data_path }}/certificates/ca/ca-key.pem"

- name: Generate intermediate certificates
  template:
    src: intermediate-csr.json.j2
    dest: "{{ data_path }}/certificates/intermediate/{{ item }}/{{ item }}-csr.json"
  with_items:
    - kubernetes-front-proxy-ca
    - kubernetes-ca
    - etcd-ca

- name: Generation des certificats intermediaires
  shell: 'cfssl gencert -initca "{{ data_path }}/certificates/intermediate/{{ item }}/{{ item }}-csr.json" | cfssljson -bare "{{ data_path }}/certificates/intermediate/{{ item }}/{{ item }}"'
  args:
    creates: "{{ data_path }}/certificates/intermediate/{{ item }}/{{ item }}-key.pem"
  with_items:
    - kubernetes-front-proxy-ca
    - kubernetes-ca
    - etcd-ca

- name: generation de la configuration des CA intermediaires
  template:
    src: root_to_intermediate.json.j2
    dest: "{{ data_path }}/certificates/ca/root_to_intermediate.json"

- name: signature des certificats intermediaires sur le CA_ROOT
  shell: 'cfssl sign -ca "{{ data_path }}/certificates/ca/ca.pem"  -ca-key "{{ data_path }}/certificates/ca/ca-key.pem"  -config "{{ data_path }}/certificates/ca/root_to_intermediate.json" "{{ data_path }}/certificates/intermediate/{{ item }}/{{ item }}.csr"   | cfssljson -bare "{{ data_path }}/certificates/intermediate/{{ item }}/signed/{{ item }}"'
  args:
    creates: "{{ data_path }}/certificates/intermediate/{{ item }}/signed/{{ item }}.pem"
  with_items:
    - kubernetes-front-proxy-ca
    - kubernetes-ca
    - etcd-ca

- name: generation de la configuration des CAs finaux 1
  template:
    src: end_1.json
    dest: "{{ data_path }}/certificates/end/{{item.name}}/{{item.name}}-csr.json"
  with_items:
    - { name: 'kube-etcd-healthcheck-client', o: ''}
    - { name: 'kube-apiserver-etcd-client',  o: 'system:masters' }
    - { name: 'kube-apiserver-kubelet-client', o: 'system:masters' }
    - { name: 'front-proxy-client', o: ''}

- name: generation dossiers serveurs etcd dans "{{ data_path }}/certificates/end/kube-etcd-peer/[serveur_name]"
  file:
    path: "{{ data_path }}/certificates/end/kube-etcd-peer/{{item}}"
    state: directory
  with_items: "{{ groups['etcd'] }}"

- name: generation de la configuration du ca final kube-etcd-peer
  template:
    src: kube-etcd-peer-csr.json.j2
    dest : "{{ data_path }}/certificates/end/kube-etcd-peer/{{item}}/kube-etcd-peer-csr.json"
  with_items: "{{ groups['etcd'] }}"

- name: generation de la configuration du ca final kube-etcd
  template:
    src: kube-etcd-csr.json.j2
    dest : "{{ data_path }}/certificates/end/kube-etcd/kube-etcd-csr.json"

- name: generation dossiers serveurs etcd dans "{{ data_path }}/certificates/end/kube-apiserver/[serveur_name]"
  file:
    path: "{{ data_path }}/certificates/end/kube-apiserver/{{item}}"
    state: directory
  with_items: "{{ groups['masters'] }}"

- name: generation de la configuration du ca final kube-apiserver
  template:
    src: kube-apiserver-csr.json.j2
    dest: "{{ data_path }}/certificates/end/kube-apiserver/{{item}}/kube-apiserver-csr.json"
  with_items: "{{ groups['masters'] }}"

- name: Config "{{ data_path }}/certificates/intermediate/intermediate_to_end.json"
  template:
    src: intermediate_to_end.json.j2
    dest: "{{ data_path }}/certificates/intermediate/intermediate_to_end.json"

- name: generate certificates [kube-etcd-healthcheck-client] [kube-apiserver-etcd-client]
  shell: 'cfssl gencert -ca "{{ data_path }}/certificates/intermediate/etcd-ca/signed/etcd-ca.pem" -ca-key "{{ data_path }}/certificates/intermediate/etcd-ca/etcd-ca-key.pem"  -config "{{ data_path }}/certificates/intermediate/intermediate_to_end.json"  -profile client  "{{ data_path }}/certificates/end/{{item}}/{{item}}-csr.json" | cfssljson -bare "{{ data_path }}/certificates/end/{{item}}/{{item}}"'
  args:
    creates: "{{ data_path }}/certificates/end/{{ item }}/{{ item }}-key.pem"
  with_items:
    - kube-etcd-healthcheck-client
    - kube-apiserver-etcd-client
- name: generate certificate [kube-etcd-peer]
  shell: 'cfssl gencert -ca "{{ data_path }}/certificates/intermediate/etcd-ca/signed/etcd-ca.pem" -ca-key "{{ data_path }}/certificates/intermediate/etcd-ca/etcd-ca-key.pem"  -config "{{ data_path }}/certificates/intermediate/intermediate_to_end.json" -profile client -profile server "{{ data_path }}/certificates/end/kube-etcd-peer/{{item}}/kube-etcd-peer-csr.json" | cfssljson -bare "{{ data_path }}/certificates/end/kube-etcd-peer/{{item}}/kube-etcd-peer"'
  args:
    creates: "{{ data_path }}/certificates/end/kube-etcd-peer/{{item}}/kube-etcd-peer-key.pem"
  with_items: "{{ groups['etcd'] }}"

- name: generate certificate [kube-etcd]
  shell: 'cfssl gencert -ca "{{ data_path }}/certificates/intermediate/etcd-ca/signed/etcd-ca.pem" -ca-key "{{ data_path }}/certificates/intermediate/etcd-ca/etcd-ca-key.pem"  -config "{{ data_path }}/certificates/intermediate/intermediate_to_end.json" -profile client -profile server "{{ data_path }}/certificates/end/kube-etcd/kube-etcd-csr.json" | cfssljson -bare "{{ data_path }}/certificates/end/kube-etcd/kube-etcd"'
  args:
    creates: "{{ data_path }}/certificates/end/kube-etcd/kube-etcd-key.pem"

- name : generate certificate [kube-apiserver]
  shell: 'cfssl gencert -ca "{{ data_path }}/certificates/intermediate/kubernetes-ca/signed/kubernetes-ca.pem" -ca-key "{{ data_path }}/certificates/intermediate/kubernetes-ca/kubernetes-ca-key.pem"  -config "{{ data_path }}/certificates/intermediate/intermediate_to_end.json" -profile server  "{{ data_path }}/certificates/end/kube-apiserver/{{ item }}/kube-apiserver-csr.json" | cfssljson -bare "{{ data_path }}/certificates/end/kube-apiserver/{{ item }}/kube-apiserver"'
  args:
    creates: "{{ data_path }}/certificates/end/kube-apiserver/{{ item }}/kube-apiserver-key.pem"
  with_items: "{{ groups['masters'] }}"

- name: generate certificate [kube-apiserver-kubelet-client]
  shell: 'cfssl gencert -ca "{{ data_path }}/certificates/intermediate/kubernetes-ca/signed/kubernetes-ca.pem" -ca-key "{{ data_path }}/certificates/intermediate/kubernetes-ca/kubernetes-ca-key.pem"  -config "{{ data_path }}/certificates/intermediate/intermediate_to_end.json" -profile client  "{{ data_path }}/certificates/end/kube-apiserver-kubelet-client/kube-apiserver-kubelet-client-csr.json" | cfssljson -bare "{{ data_path }}/certificates/end/kube-apiserver-kubelet-client/kube-apiserver-kubelet-client"'
  args:
    creates: "{{ data_path }}/certificates/end/kube-apiserver-kubelet-client/kube-apiserver-kubelet-client-key.pem"

- name: generate certificate [front-proxy-client]
  shell: 'cfssl gencert -ca "{{ data_path }}/certificates/intermediate/kubernetes-front-proxy-ca/signed/kubernetes-front-proxy-ca.pem" -ca-key "{{ data_path }}/certificates/intermediate/kubernetes-front-proxy-ca/kubernetes-front-proxy-ca-key.pem"  -config "{{ data_path }}/certificates/intermediate/intermediate_to_end.json" -profile client  "{{ data_path }}/certificates/end/front-proxy-client/front-proxy-client-csr.json" | cfssljson -bare "{{ data_path }}/certificates/end/front-proxy-client/front-proxy-client"'
  args:
    creates: "{{ data_path }}/certificates/end/front-proxy-client/front-proxy-client-key.pem"

- name: create configuration files for config [admin] [controller-manager] [scheduler]
  template:
    src: certificates_for_users_classics.json.j2
    dest: "{{ data_path }}/certificates/configs/{{ item.name }}/{{ item.name }}-csr.json"
  with_items:
    - { name: 'admin', o: 'system:masters', cname: 'kubernetes-admin' }
    - { name: 'controller-manager', o: '', cname: 'system:kube-controller-manager' }
    - { name: 'scheduler', o: '', cname: 'system:kube-scheduler' }
    - { name: 'proxier', o: '', cname: 'system:kube-proxy' }
- name: generation des certificats pour [admin] [controller-manager] [scheduler]
  shell: 'cfssl gencert -ca "{{ data_path }}/certificates/intermediate/kubernetes-ca/signed/kubernetes-ca.pem" -ca-key "{{ data_path }}/certificates/intermediate/kubernetes-ca/kubernetes-ca-key.pem"  "{{ data_path }}/certificates/configs/{{ item }}/{{ item }}-csr.json" | cfssljson -bare "{{ data_path }}/certificates/configs/{{ item }}/{{ item }}"'
  args:
    creates: "{{ data_path }}/certificates/configs/{{ item }}/{{ item }}-key.pem"
  with_items:
    - admin
    - controller-manager
    - scheduler
    - proxier

- name: generate arbo kubelet for masters
  file:
    path: "{{ data_path }}/certificates/configs/kubelet/{{ item}}"
    state: directory
  with_items: "{{ groups['masters'] }}"

- name: generate arbo kubelet for workers
  file:
    path: "{{ data_path }}/certificates/configs/kubelet/{{item}}"
    state: directory
  with_items: "{{ groups['workers'] }}"

- name : generate configuration account kubelet masters
  template:
    src: config-kubelet-account.json.j2
    dest:  "{{ data_path }}/certificates/configs/kubelet/{{item}}/config-kubelet-account.json"
  with_items: "{{ groups['masters'] }}"

- name: generation des certificats pour [kubelet] masters
  shell: 'cfssl gencert -ca "{{ data_path }}/certificates/intermediate/kubernetes-ca/signed/kubernetes-ca.pem" -ca-key "{{ data_path }}/certificates/intermediate/kubernetes-ca/kubernetes-ca-key.pem"  "{{ data_path }}/certificates/configs/kubelet/{{ item }}/config-kubelet-account.json" | cfssljson -bare "{{ data_path }}/certificates/configs/kubelet/{{ item }}/kubelet"'
  args:
    creates: "{{ data_path }}/certificates/configs/kubelet/{{ item }}/kubelet-key.pem"
  with_items: "{{ groups['masters'] }}"

- name : generate configuration account kubelet workers
  template:
    src: config-kubelet-account.json.j2
    dest:  "{{ data_path }}/certificates/configs/kubelet/{{ item }}/config-kubelet-account.json"
  with_items: "{{ groups['workers'] }}"

- name: generation des certificats pour [kubelet] workers
  shell: 'cfssl gencert -ca "{{ data_path }}/certificates/intermediate/kubernetes-ca/signed/kubernetes-ca.pem" -ca-key "{{ data_path }}/certificates/intermediate/kubernetes-ca/kubernetes-ca-key.pem"  "{{ data_path }}/certificates/configs/kubelet/{{ item }}/config-kubelet-account.json" | cfssljson -bare "{{ data_path }}/certificates/configs/kubelet/{{ item }}/kubelet"'
  args:
    creates: "{{ data_path }}/certificates/configs/kubelet/{{ item }}/kubelet-key.pem"
  with_items: "{{ groups['workers'] }}"

- name: Generation fichier de configuration kubeconfig pour [proxier]
  shell: "{{ item }}"
  args:
    creates: "{{ data_path }}/certificates/configs/proxier/proxier.flag"
  with_items:
    - KUBECONFIG="{{ data_path }}/certificates/configs/proxier/proxier.conf" kubectl config set-cluster default-cluster --server=https://{{advertise_ip_masters}}:6443 --certificate-authority "{{ data_path }}/certificates/intermediate/kubernetes-ca/signed/kubernetes-ca.pem" --embed-certs
    - KUBECONFIG="{{ data_path }}/certificates/configs/proxier/proxier.conf" kubectl config set-credentials system:kube-proxy --client-key "{{ data_path }}/certificates/configs/proxier/proxier-key.pem" --client-certificate "{{ data_path }}/certificates/configs/proxier/proxier.pem" --embed-certs
    - KUBECONFIG="{{ data_path }}/certificates/configs/proxier/proxier.conf" kubectl config set-context default-system --cluster default-cluster --user system:kube-proxy
    - KUBECONFIG="{{ data_path }}/certificates/configs/proxier/proxier.conf" kubectl config use-context default-system
    - touch "{{ data_path }}/certificates/configs/proxier/proxier.flag"

- name: Generation fichier de configuration kubeconfig pour [admin]
  shell: "{{ item }}"
  args:
    creates: "{{ data_path }}/certificates/configs/admin/admin.flag"
  with_items:
    - KUBECONFIG="{{ data_path }}/certificates/configs/admin/admin.conf" kubectl config set-cluster default-cluster --server=https://{{advertise_ip_masters}}:6443 --certificate-authority "{{ data_path }}/certificates/intermediate/kubernetes-ca/signed/kubernetes-ca.pem" --embed-certs
    - KUBECONFIG="{{ data_path }}/certificates/configs/admin/admin.conf" kubectl config set-credentials default-admin --client-key "{{ data_path }}/certificates/configs/admin/admin-key.pem" --client-certificate "{{ data_path }}/certificates/configs/admin/admin.pem" --embed-certs
    - KUBECONFIG="{{ data_path }}/certificates/configs/admin/admin.conf" kubectl config set-context default-system --cluster default-cluster --user default-admin
    - KUBECONFIG="{{ data_path }}/certificates/configs/admin/admin.conf" kubectl config use-context default-system
    - touch "{{ data_path }}/certificates/configs/admin/admin.flag"

- name: Generation fichier de configuration kubeconfig pour [controller-manager]
  shell: "{{ item }}"
  args:
    creates: "{{ data_path }}/certificates/configs/controller-manager/controller-manager.flag"
  with_items:
    - KUBECONFIG="{{ data_path }}/certificates/configs/controller-manager/controller-manager.conf" kubectl config set-cluster default-cluster --server=https://{{advertise_ip_masters}}:6443 --certificate-authority "{{ data_path }}/certificates/intermediate/kubernetes-ca/signed/kubernetes-ca.pem" --embed-certs
    - KUBECONFIG="{{ data_path }}/certificates/configs/controller-manager/controller-manager.conf" kubectl config set-credentials default-controller-manager --client-key "{{ data_path }}/certificates/configs/controller-manager/controller-manager-key.pem" --client-certificate "{{ data_path }}/certificates/configs/controller-manager/controller-manager.pem" --embed-certs
    - KUBECONFIG="{{ data_path }}/certificates/configs/controller-manager/controller-manager.conf" kubectl config set-context default-system --cluster default-cluster --user default-controller-manager
    - KUBECONFIG="{{ data_path }}/certificates/configs/controller-manager/controller-manager.conf" kubectl config use-context default-system
    - touch "{{ data_path }}/certificates/configs/controller-manager/controller-manager.flag"

- name: Generation fichier de configuration kubeconfig pour [scheduler]
  shell: "{{ item }}"
  args:
    creates: "{{ data_path }}/certificates/configs/scheduler/scheduler.flag"
  with_items:
    - KUBECONFIG="{{ data_path }}/certificates/configs/scheduler/scheduler.conf" kubectl config set-cluster default-cluster --server=https://{{advertise_ip_masters}}:6443 --certificate-authority "{{ data_path }}/certificates/intermediate/kubernetes-ca/signed/kubernetes-ca.pem" --embed-certs
    - KUBECONFIG="{{ data_path }}/certificates/configs/scheduler/scheduler.conf" kubectl config set-credentials default-manager --client-key "{{ data_path }}/certificates/configs/scheduler/scheduler-key.pem" --client-certificate "{{ data_path }}/certificates/configs/scheduler/scheduler.pem" --embed-certs
    - KUBECONFIG="{{ data_path }}/certificates/configs/scheduler/scheduler.conf" kubectl config set-context default-system --cluster default-cluster --user default-manager
    - KUBECONFIG="{{ data_path }}/certificates/configs/scheduler/scheduler.conf" kubectl config use-context default-system
    - touch "{{ data_path }}/certificates/configs/scheduler/scheduler.flag"

- name: Generation fichier de configuration kubeconfig pour [kubelet] masters 1/4
  shell: KUBECONFIG="{{ data_path }}/certificates/configs/kubelet/{{item}}/kubelet.config" kubectl config set-cluster default-cluster --server=https://{{advertise_ip_masters}}:6443 --certificate-authority "{{ data_path }}/certificates/intermediate/kubernetes-ca/signed/kubernetes-ca.pem" --embed-certs
  args:
    creates: "{{ data_path }}/certificates/configs/kubelet/{{item}}/kubelet.flag"
  with_items: "{{ groups['masters'] }}"

- name: Generation fichier de configuration kubeconfig pour [kubelet] masters 2/4
  shell: KUBECONFIG="{{ data_path }}/certificates/configs/kubelet/{{item}}/kubelet.config" kubectl config set-credentials default-auth --client-key "{{ data_path }}/certificates/configs/kubelet/{{item}}/kubelet-key.pem" --client-certificate "{{ data_path }}/certificates/configs/kubelet/{{item}}/kubelet.pem" --embed-certs
  args:
    creates: "{{ data_path }}/certificates/configs/kubelet/{{item}}/kubelet.flag"
  with_items: "{{ groups['masters'] }}"

- name: Generation fichier de configuration kubeconfig pour [kubelet] masters 3/4
  shell: KUBECONFIG="{{ data_path }}/certificates/configs/kubelet/{{item}}/kubelet.config" kubectl config set-context default-system --cluster default-cluster --user default-auth
  args:
    creates: "{{ data_path }}/certificates/configs/kubelet/{{item}}/kubelet.flag"
  with_items: "{{ groups['masters'] }}"

- name: Generation fichier de configuration kubeconfig pour [kubelet] masters 4/4
  shell: KUBECONFIG="{{ data_path }}/certificates/configs/kubelet/{{item}}/kubelet.config" kubectl config use-context default-system
  args:
    creates: "{{ data_path }}/certificates/configs/kubelet/{{item}}/kubelet.flag"
  with_items: "{{ groups['masters'] }}"

- name: Create flags [Modifier plus tard !!]
  copy:
    dest: "{{ data_path }}/certificates/configs/kubelet/{{item}}/kubelet.flag"
    content: ''
  with_items: "{{ groups['masters'] }}"


- name: Generation fichier de configuration kubeconfig pour [kubelet] workers 1/4
  shell: KUBECONFIG="{{ data_path }}/certificates/configs/kubelet/{{item}}/kubelet.config" kubectl config set-cluster default-cluster --server=https://{{advertise_ip_masters}}:6443 --certificate-authority "{{ data_path }}/certificates/intermediate/kubernetes-ca/signed/kubernetes-ca.pem" --embed-certs
  args:
    creates: "{{ data_path }}/certificates/configs/kubelet/{{item}}/kubelet.flag"
  with_items: "{{ groups['workers'] }}"

- name: Generation fichier de configuration kubeconfig pour [kubelet] workers 2/4
  shell: KUBECONFIG="{{ data_path }}/certificates/configs/kubelet/{{item}}/kubelet.config" kubectl config set-credentials default-auth --client-key "{{ data_path }}/certificates/configs/kubelet/{{item}}/kubelet-key.pem" --client-certificate "{{ data_path }}/certificates/configs/kubelet/{{item}}/kubelet.pem" --embed-certs
  args:
    creates: "{{ data_path }}/certificates/configs/kubelet/{{item}}/kubelet.flag"
  with_items: "{{ groups['workers'] }}"

- name: Generation fichier de configuration kubeconfig pour [kubelet] workers 3/4
  shell: KUBECONFIG="{{ data_path }}/certificates/configs/kubelet/{{item}}/kubelet.config" kubectl config set-context default-system --cluster default-cluster --user default-auth
  args:
    creates: "{{ data_path }}/certificates/configs/kubelet/{{item}}/kubelet.flag"
  with_items: "{{ groups['workers'] }}"

- name: Generation fichier de configuration kubeconfig pour [kubelet] workers 4/4
  shell: KUBECONFIG="{{ data_path }}/certificates/configs/kubelet/{{item}}/kubelet.config" kubectl config use-context default-system
  args:
    creates: "{{ data_path }}/certificates/configs/kubelet/{{item}}/kubelet.flag"
  with_items: "{{ groups['workers'] }}"

- name: Create flags [Modifier plus tard !!] workers
  copy:
    dest: "{{ data_path }}/certificates/configs/kubelet/{{item}}/kubelet.flag"
    content: ''
  with_items: "{{ groups['workers'] }}"
